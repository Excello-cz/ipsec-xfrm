#!/sbin/runscript

extra_commands="flush"
extra_started_commands="update"

IPSEC_HOSTS_STABLE=${IPSEC_HOSTS_STABLE:-/var/lib/ipsec/ipsechosts}
IPSEC_HOSTS_UPDATE=${IPSEC_HOSTS_UPDATE:-/var/lib/ipsec/ipsechosts-update}
LOCAL_HOSTNAME=`/bin/hostname --fqdn`
IP_XFRM="/bin/ip xfrm"

depend() {
	need net
}

update() {
	check ${IPSEC_HOSTS_UPDATE} || return 1
	flush
	load ${IPSEC_HOSTS_UPDATE}
	if [ $? -eq 0 ]; then
		mv ${IPSEC_HOSTS_UPDATE} ${IPSEC_HOSTS_STABLE}
	else
		eerror "Update failed - restarting"
		rc-service ipsec restart
	fi
}

start() {
	check ${IPSEC_HOSTS_STABLE} || return 1
	flush
	load ${IPSEC_HOSTS_STABLE}
	if [ $? -ne 0 ]; then
		eerror "Start failed - stopping"
		flush
		return 2
	fi
}

stop() {
	flush
}

check() {
	local IPSEC_HOSTS_FILE=$1
	local STATUS_CHECK=0
	ebegin "Checking ipsec hosts file ${IPSEC_HOSTS_FILE}"
	if [ -f "${IPSEC_HOSTS_FILE}" ]; then
		COUNT_AWK=`awk '{print $4}' ${IPSEC_HOSTS_FILE} | wc -l`
		COUNT_FILE=`cat ${IPSEC_HOSTS_FILE} | wc -l`
		if [ "COUNT_AWK" != "COUNT_FILE" ];then
			eerror "ipsechosts file ${IPSEC_HOSTS_FILE} has empty rows"
			STATUS_CHECK=3
                fi
		ERROR_SPI=`awk '{print $3}' ${IPSEC_HOSTS_FILE} | sort | uniq -d`
		if [ -n "$ERROR_SPI" ];then
			eerror "SPI is not unique: ${ERROR_SPI}"
			STATUS_CHECK=3
		fi
		ERROR_IP=`awk '{print $1}' ${IPSEC_HOSTS_FILE} | sort | uniq -d`
		if [ -n "$ERROR_IP" ];then
			eerror "IP is not unique: ${ERROR_IP}"
			STATUS_CHECK=4
		fi
	else
		eerror "ipsechosts file ${IPSEC_HOSTS_FILE} doesn't exist"
		STATUS_CHECK=2
	fi
	eend $STATUS_CHECK
}

load() {
	local IPSEC_HOSTS_FILE=$1
	local STATUS_LOAD=0
	ebegin "Loading associations and policies from ${IPSEC_HOSTS_FILE}" 
	while read ITR ITR_HOSTNAME ITR_SPI ITR_PSK; do
		if [ ${ITR_HOSTNAME} == ${LOCAL_HOSTNAME} ]; then
			echo "--- ${ITR_SPI} / ${ITR_PSK} - ${ITR} (${ITR_HOSTNAME}) "
			while read RPD RPD_HOSTNAME RPD_SPI RPD_PSK; do 
				if [ ${RPD_HOSTNAME} != ${LOCAL_HOSTNAME} ]; then
					echo "  > ${RPD_SPI} / ${RPD_PSK} - ${RPD} ($RPD_HOSTNAME) "
					
					${IP_XFRM} state add src ${ITR} dst ${RPD} proto esp spi 0x${ITR_SPI}${RPD_SPI} \
						mode transport aead "rfc4106(gcm(aes))" 0x${RPD_PSK} 96 || STATUS_LOAD=5
					[ ${STATUS_LOAD} -eq 0 ] || eerror "Setting security association failed 0x${ITR_SPI}${RPD_SPI}"
					
					${IP_XFRM} state add src ${RPD} dst ${ITR} proto esp spi 0x${RPD_SPI}${ITR_SPI} \
						mode transport aead "rfc4106(gcm(aes))" 0x${ITR_PSK} 96 || STATUS_LOAD=6
					[ ${STATUS_LOAD} -eq 0 ] || eerror "Setting security association failed 0x${RPD_SPI}${RPD_SPI}"
					
					${IP_XFRM} policy add dir out src ${ITR} dst ${RPD} tmpl proto esp mode transport || STATUS_LOAD=7
					[ ${STATUS_LOAD} -eq 0 ] || eerror "Setting security policy failed ${RPD} (${RPD_HOSTNAME})"
				fi
			done < ${IPSEC_HOSTS_FILE}
		fi
	done < ${IPSEC_HOSTS_FILE}
	eend $STATUS_LOAD
}

flush() {
	ebegin "Flushing associations and policies" 
		${IP_XFRM} state flush
		${IP_XFRM} policy flush
	eend $?
}
